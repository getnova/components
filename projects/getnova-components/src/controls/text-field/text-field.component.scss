@import "../../scss/variables";

$padding: $cube * 10;
$padding-top: $cube * 20;
$border-width: $cube * 2;

:host {
  display: flex;
  flex-direction: column;
  width: 100%;

  > ::ng-deep label {
    position: absolute;
    transform: translateX($padding + $border-width) translateY($cube * 4) scale(0.8);
    transform-origin: left;
    transition: transform $transition, color $transition;

    user-select: none;
    cursor: text;
  }

  > ::ng-deep [novaTextFieldRef] {
    width: calc(100% - #{$padding * 2 + $border-width * 2});
    outline: none;
    box-shadow: none;
    border: $border-width solid transparent;
    border-radius: $border-radius;
    transition: border-color $transition, color $transition;

    padding: $padding-top $padding $padding;
    margin-bottom: $cube * 1;
    background-color: $secondary;

    &[type=number] {
      -moz-appearance: textfield;

      &::-webkit-outer-spin-button,
      &::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
    }
  }

  > ::ng-deep [novaTextFieldError] {
    color: $red;
  }

  &.empty > ::ng-deep [novaTextFieldRef]:not(:focus):not(:invalid) {
    color: transparent;

    + ::ng-deep label {
      transform: translateX($padding + $border-width) translateY(($padding-top + $padding + $border-width * 2) / 2);
    }
  }

  > ::ng-deep [novaTextFieldRef]:focus {
    border-color: $primary;
  }

  &.error > ::ng-deep [novaTextFieldRef]:focus, > ::ng-deep [novaTextFieldRef]:focus:invalid {
    border-color: $red-dark;
  }

  &.error > ::ng-deep [novaTextFieldRef], > ::ng-deep [novaTextFieldRef]:invalid {
    &, + ::ng-deep label {
      color: $red;
    }
  }
}
