name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:

jobs:

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v2
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci

      - run: npm run lint

  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: [ getnova-components, playground, docs ]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v2
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci

      - run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless ${{ matrix.project }}

  build-components:
    needs: [ lint, test ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v2
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci

      - run: npm run build:ci getnova-components

      - name: Update version
        working-directory: dist/getnova-components
        run: |
          version=${GITHUB_REF/refs\/tags\//}
          if [[ ${version} != "" && ${version:0:1} == "v" ]]; then
            npm version --no-git-tag-version ${version:1}
          fi

      - uses: actions/upload-artifact@v2
        with:
          name: components
          path: dist/getnova-components

  build:
    needs: [ build-components ]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: [ playground, docs ]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v2
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci

      - uses: actions/download-artifact@v2
        with:
          name: components
          path: dist/getnova-components

      - run: npm run build:ci ${{ matrix.project }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.project }}
          path: dist/${{ matrix.project }}

  deploy-docs:
    needs: [ build ]
    runs-on: ubuntu-latest
    if: ${{ github.event_name }} != "pull_request"

    environment:
      name: github-pages
      url: https://getnova.github.io/components

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: docs
          path: docs

      - run: touch docs/.nojekyll

      - uses: SteveSandersonMS/ghaction-rewrite-base-href@v1
        with:
          html_path: 'docs/index.html'
          base_href: '/components/'

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY_NAME: ${{ github.repository }}
          BRANCH: gh-pages
          FOLDER: docs
          # TARGET_FOLDER: ${{ steps.prepare_deploy.outputs.folder }}
          # CLEAN_EXCLUDE: ${{ steps.prepare_deploy.outputs.clean_exclude }}
          CLEAN: true

          # https://github.com/crazy-max/ghaction-github-pages/blob/dev/src/git.ts#L3-L8
          COMMIT_MESSAGE: Deploy to GitHub pages
          GIT_CONFIG_NAME: github-actions[bot]
          GIT_CONFIG_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com

  publish-npm:
    needs: [ build-components ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14
          scope: ${{ github.repository_owner }}
          registry-url: https://registry.npmjs.org/

      - uses: actions/download-artifact@v2
        with:
          name: components
          path: components

      - run: npm publish --access public
        working-directory: components
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-gpr:
    needs: [ build-components ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14
          scope: ${{ github.repository_owner }}
          registry-url: https://npm.pkg.github.com

      - uses: actions/download-artifact@v2
        with:
          name: components
          path: components

      - run: npm publish
        working-directory: components
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
